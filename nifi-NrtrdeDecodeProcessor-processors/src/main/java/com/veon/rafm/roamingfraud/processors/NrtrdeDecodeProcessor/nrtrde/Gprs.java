/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.nrtrde;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.serializers.ByteArraySerializer;
import com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.serializers.ImeiImsiMsIsdnSerializer;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.openmuc.jasn1.ber.*;


public class Gprs implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 5);

	public byte[] code = null;
	private Imsi imsi = null;
	private Imei imei = null;
	private CallEventStartTimeStamp callEventStartTimeStamp = null;
	private UtcTimeOffset utcTimeOffset = null;
	private CallEventDuration callEventDuration = null;
	private CauseForTermination causeForTermination = null;
	private AccessPointNameNI accessPointNameNI = null;
	private AccessPointNameOI accessPointNameOI = null;
	private DataVolumeIncoming dataVolumeIncoming = null;
	private DataVolumeOutgoing dataVolumeOutgoing = null;
	private SgsnAddress sgsnAddress = null;
	private GgsnAddress ggsnAddress = null;
	private ChargingId chargingId = null;
	private ChargeAmount chargeAmount = null;
	private ServingNetwork servingNetwork = null;
	private Msisdn msisdn = null;
	private LocationArea locationArea = null;
	private CellId cellId = null;
	
	public Gprs() {
	}

	public Gprs(byte[] code) {
		this.code = code;
	}

	public void setImsi(Imsi imsi) {
		this.imsi = imsi;
	}

	@JsonSerialize(using= ImeiImsiMsIsdnSerializer.class)
	public Imsi getImsi() {
		return imsi;
	}

	public void setImei(Imei imei) {
		this.imei = imei;
	}

	@JsonSerialize(using= ImeiImsiMsIsdnSerializer.class)
	public Imei getImei() {
		return imei;
	}

	public void setCallEventStartTimeStamp(CallEventStartTimeStamp callEventStartTimeStamp) {
		this.callEventStartTimeStamp = callEventStartTimeStamp;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public CallEventStartTimeStamp getCallEventStartTimeStamp() {
		return callEventStartTimeStamp;
	}

	public void setUtcTimeOffset(UtcTimeOffset utcTimeOffset) {
		this.utcTimeOffset = utcTimeOffset;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public UtcTimeOffset getUtcTimeOffset() {
		return utcTimeOffset;
	}

	public void setCallEventDuration(CallEventDuration callEventDuration) {
		this.callEventDuration = callEventDuration;
	}

	public CallEventDuration getCallEventDuration() {
		return callEventDuration;
	}

	public void setCauseForTermination(CauseForTermination causeForTermination) {
		this.causeForTermination = causeForTermination;
	}

	public CauseForTermination getCauseForTermination() {
		return causeForTermination;
	}

	public void setAccessPointNameNI(AccessPointNameNI accessPointNameNI) {
		this.accessPointNameNI = accessPointNameNI;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public AccessPointNameNI getAccessPointNameNI() {
		return accessPointNameNI;
	}

	public void setAccessPointNameOI(AccessPointNameOI accessPointNameOI) {
		this.accessPointNameOI = accessPointNameOI;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public AccessPointNameOI getAccessPointNameOI() {
		return accessPointNameOI;
	}

	public void setDataVolumeIncoming(DataVolumeIncoming dataVolumeIncoming) {
		this.dataVolumeIncoming = dataVolumeIncoming;
	}

	public DataVolumeIncoming getDataVolumeIncoming() {
		return dataVolumeIncoming;
	}

	public void setDataVolumeOutgoing(DataVolumeOutgoing dataVolumeOutgoing) {
		this.dataVolumeOutgoing = dataVolumeOutgoing;
	}

	public DataVolumeOutgoing getDataVolumeOutgoing() {
		return dataVolumeOutgoing;
	}

	public void setSgsnAddress(SgsnAddress sgsnAddress) {
		this.sgsnAddress = sgsnAddress;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public SgsnAddress getSgsnAddress() {
		return sgsnAddress;
	}

	public void setGgsnAddress(GgsnAddress ggsnAddress) {
		this.ggsnAddress = ggsnAddress;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public GgsnAddress getGgsnAddress() {
		return ggsnAddress;
	}

	public void setChargingId(ChargingId chargingId) {
		this.chargingId = chargingId;
	}

	public ChargingId getChargingId() {
		return chargingId;
	}

	public void setChargeAmount(ChargeAmount chargeAmount) {
		this.chargeAmount = chargeAmount;
	}

	public ChargeAmount getChargeAmount() {
		return chargeAmount;
	}

	public void setServingNetwork(ServingNetwork servingNetwork) {
		this.servingNetwork = servingNetwork;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public ServingNetwork getServingNetwork() {
		return servingNetwork;
	}

	public void setMsisdn(Msisdn msisdn) {
		this.msisdn = msisdn;
	}

	@JsonSerialize(using= ImeiImsiMsIsdnSerializer.class)
	public Msisdn getMsisdn() {
		return msisdn;
	}

	public void setLocationArea(LocationArea locationArea) {
		this.locationArea = locationArea;
	}

	public LocationArea getLocationArea() {
		return locationArea;
	}

	public void setCellId(CellId cellId) {
		this.cellId = cellId;
	}

	public CellId getCellId() {
		return cellId;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (cellId != null) {
			codeLength += cellId.encode(os, true);
		}
		
		if (locationArea != null) {
			codeLength += locationArea.encode(os, true);
		}
		
		if (msisdn != null) {
			codeLength += msisdn.encode(os, true);
		}
		
		if (servingNetwork != null) {
			codeLength += servingNetwork.encode(os, true);
		}
		
		if (chargeAmount != null) {
			codeLength += chargeAmount.encode(os, true);
		}
		
		if (chargingId != null) {
			codeLength += chargingId.encode(os, true);
		}
		
		if (ggsnAddress != null) {
			codeLength += ggsnAddress.encode(os, true);
		}
		
		if (sgsnAddress != null) {
			codeLength += sgsnAddress.encode(os, true);
		}
		
		if (dataVolumeOutgoing != null) {
			codeLength += dataVolumeOutgoing.encode(os, true);
		}
		
		if (dataVolumeIncoming != null) {
			codeLength += dataVolumeIncoming.encode(os, true);
		}
		
		if (accessPointNameOI != null) {
			codeLength += accessPointNameOI.encode(os, true);
		}
		
		if (accessPointNameNI != null) {
			codeLength += accessPointNameNI.encode(os, true);
		}
		
		if (causeForTermination != null) {
			codeLength += causeForTermination.encode(os, true);
		}
		
		if (callEventDuration != null) {
			codeLength += callEventDuration.encode(os, true);
		}
		
		if (utcTimeOffset != null) {
			codeLength += utcTimeOffset.encode(os, true);
		}
		
		if (callEventStartTimeStamp != null) {
			codeLength += callEventStartTimeStamp.encode(os, true);
		}
		
		if (imei != null) {
			codeLength += imei.encode(os, true);
		}
		
		if (imsi != null) {
			codeLength += imsi.encode(os, true);
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(Imsi.tag)) {
			imsi = new Imsi();
			subCodeLength += imsi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Imei.tag)) {
			imei = new Imei();
			subCodeLength += imei.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventStartTimeStamp.tag)) {
			callEventStartTimeStamp = new CallEventStartTimeStamp();
			subCodeLength += callEventStartTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(UtcTimeOffset.tag)) {
			utcTimeOffset = new UtcTimeOffset();
			subCodeLength += utcTimeOffset.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventDuration.tag)) {
			callEventDuration = new CallEventDuration();
			subCodeLength += callEventDuration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CauseForTermination.tag)) {
			causeForTermination = new CauseForTermination();
			subCodeLength += causeForTermination.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(AccessPointNameNI.tag)) {
			accessPointNameNI = new AccessPointNameNI();
			subCodeLength += accessPointNameNI.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(AccessPointNameOI.tag)) {
			accessPointNameOI = new AccessPointNameOI();
			subCodeLength += accessPointNameOI.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DataVolumeIncoming.tag)) {
			dataVolumeIncoming = new DataVolumeIncoming();
			subCodeLength += dataVolumeIncoming.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DataVolumeOutgoing.tag)) {
			dataVolumeOutgoing = new DataVolumeOutgoing();
			subCodeLength += dataVolumeOutgoing.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SgsnAddress.tag)) {
			sgsnAddress = new SgsnAddress();
			subCodeLength += sgsnAddress.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(GgsnAddress.tag)) {
			ggsnAddress = new GgsnAddress();
			subCodeLength += ggsnAddress.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargingId.tag)) {
			chargingId = new ChargingId();
			subCodeLength += chargingId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargeAmount.tag)) {
			chargeAmount = new ChargeAmount();
			subCodeLength += chargeAmount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ServingNetwork.tag)) {
			servingNetwork = new ServingNetwork();
			subCodeLength += servingNetwork.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Msisdn.tag)) {
			msisdn = new Msisdn();
			subCodeLength += msisdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(LocationArea.tag)) {
			locationArea = new LocationArea();
			subCodeLength += locationArea.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CellId.tag)) {
			cellId = new CellId();
			subCodeLength += cellId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (imsi != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("imsi: ").append(imsi);
			firstSelectedElement = false;
		}
		
		if (imei != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("imei: ").append(imei);
			firstSelectedElement = false;
		}
		
		if (callEventStartTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEventStartTimeStamp: ").append(callEventStartTimeStamp);
			firstSelectedElement = false;
		}
		
		if (utcTimeOffset != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("utcTimeOffset: ").append(utcTimeOffset);
			firstSelectedElement = false;
		}
		
		if (callEventDuration != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEventDuration: ").append(callEventDuration);
			firstSelectedElement = false;
		}
		
		if (causeForTermination != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("causeForTermination: ").append(causeForTermination);
			firstSelectedElement = false;
		}
		
		if (accessPointNameNI != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accessPointNameNI: ").append(accessPointNameNI);
			firstSelectedElement = false;
		}
		
		if (accessPointNameOI != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accessPointNameOI: ").append(accessPointNameOI);
			firstSelectedElement = false;
		}
		
		if (dataVolumeIncoming != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeIncoming: ").append(dataVolumeIncoming);
			firstSelectedElement = false;
		}
		
		if (dataVolumeOutgoing != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeOutgoing: ").append(dataVolumeOutgoing);
			firstSelectedElement = false;
		}
		
		if (sgsnAddress != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sgsnAddress: ").append(sgsnAddress);
			firstSelectedElement = false;
		}
		
		if (ggsnAddress != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ggsnAddress: ").append(ggsnAddress);
			firstSelectedElement = false;
		}
		
		if (chargingId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingId: ").append(chargingId);
			firstSelectedElement = false;
		}
		
		if (chargeAmount != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargeAmount: ").append(chargeAmount);
			firstSelectedElement = false;
		}
		
		if (servingNetwork != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNetwork: ").append(servingNetwork);
			firstSelectedElement = false;
		}
		
		if (msisdn != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("msisdn: ").append(msisdn);
			firstSelectedElement = false;
		}
		
		if (locationArea != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationArea: ").append(locationArea);
			firstSelectedElement = false;
		}
		
		if (cellId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellId: ").append(cellId);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

