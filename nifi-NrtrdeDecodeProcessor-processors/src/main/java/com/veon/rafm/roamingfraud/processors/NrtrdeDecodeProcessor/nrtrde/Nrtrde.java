/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.nrtrde;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.serializers.ByteArraySerializer;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.openmuc.jasn1.ber.*;


public class Nrtrde implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 1);

	public byte[] code = null;
	private SpecificationVersionNumber specificationVersionNumber = null;
	private ReleaseVersionNumber releaseVersionNumber = null;
	private Sender sender = null;
	private Recipient recipient = null;
	private SequenceNumber sequenceNumber = null;
	private FileAvailableTimeStamp fileAvailableTimeStamp = null;
	private UtcTimeOffset utcTimeOffset = null;
	private CallEventList callEvents = null;
	private CallEventsCount callEventsCount = null;
	
	public Nrtrde() {
	}

	public Nrtrde(byte[] code) {
		this.code = code;
	}

	public void setSpecificationVersionNumber(SpecificationVersionNumber specificationVersionNumber) {
		this.specificationVersionNumber = specificationVersionNumber;
	}

	public SpecificationVersionNumber getSpecificationVersionNumber() {
		return specificationVersionNumber;
	}

	public void setReleaseVersionNumber(ReleaseVersionNumber releaseVersionNumber) {
		this.releaseVersionNumber = releaseVersionNumber;
	}

	public ReleaseVersionNumber getReleaseVersionNumber() {
		return releaseVersionNumber;
	}

	public void setSender(Sender sender) {
		this.sender = sender;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public Sender getSender() {
		return sender;
	}

	public void setRecipient(Recipient recipient) {
		this.recipient = recipient;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public Recipient getRecipient() {
		return recipient;
	}

	public void setSequenceNumber(SequenceNumber sequenceNumber) {
		this.sequenceNumber = sequenceNumber;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public SequenceNumber getSequenceNumber() {
		return sequenceNumber;
	}

	public void setFileAvailableTimeStamp(FileAvailableTimeStamp fileAvailableTimeStamp) {
		this.fileAvailableTimeStamp = fileAvailableTimeStamp;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public FileAvailableTimeStamp getFileAvailableTimeStamp() {
		return fileAvailableTimeStamp;
	}

	public void setUtcTimeOffset(UtcTimeOffset utcTimeOffset) {
		this.utcTimeOffset = utcTimeOffset;
	}

	@JsonSerialize(using= ByteArraySerializer.class)
	public UtcTimeOffset getUtcTimeOffset() {
		return utcTimeOffset;
	}

	public void setCallEvents(CallEventList callEvents) {
		this.callEvents = callEvents;
	}

	public CallEventList getCallEvents() {
		return callEvents;
	}

	public void setCallEventsCount(CallEventsCount callEventsCount) {
		this.callEventsCount = callEventsCount;
	}

	public CallEventsCount getCallEventsCount() {
		return callEventsCount;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (callEventsCount != null) {
			codeLength += callEventsCount.encode(os, true);
		}
		
		if (callEvents != null) {
			codeLength += callEvents.encode(os, true);
		}
		
		if (utcTimeOffset != null) {
			codeLength += utcTimeOffset.encode(os, true);
		}
		
		if (fileAvailableTimeStamp != null) {
			codeLength += fileAvailableTimeStamp.encode(os, true);
		}
		
		if (sequenceNumber != null) {
			codeLength += sequenceNumber.encode(os, true);
		}
		
		if (recipient != null) {
			codeLength += recipient.encode(os, true);
		}
		
		if (sender != null) {
			codeLength += sender.encode(os, true);
		}
		
		if (releaseVersionNumber != null) {
			codeLength += releaseVersionNumber.encode(os, true);
		}
		
		if (specificationVersionNumber != null) {
			codeLength += specificationVersionNumber.encode(os, true);
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(SpecificationVersionNumber.tag)) {
			specificationVersionNumber = new SpecificationVersionNumber();
			subCodeLength += specificationVersionNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ReleaseVersionNumber.tag)) {
			releaseVersionNumber = new ReleaseVersionNumber();
			subCodeLength += releaseVersionNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Sender.tag)) {
			sender = new Sender();
			subCodeLength += sender.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Recipient.tag)) {
			recipient = new Recipient();
			subCodeLength += recipient.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SequenceNumber.tag)) {
			sequenceNumber = new SequenceNumber();
			subCodeLength += sequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(FileAvailableTimeStamp.tag)) {
			fileAvailableTimeStamp = new FileAvailableTimeStamp();
			subCodeLength += fileAvailableTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(UtcTimeOffset.tag)) {
			utcTimeOffset = new UtcTimeOffset();
			subCodeLength += utcTimeOffset.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventList.tag)) {
			callEvents = new CallEventList();
			subCodeLength += callEvents.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventsCount.tag)) {
			callEventsCount = new CallEventsCount();
			subCodeLength += callEventsCount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (specificationVersionNumber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("specificationVersionNumber: ").append(specificationVersionNumber);
			firstSelectedElement = false;
		}
		
		if (releaseVersionNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("releaseVersionNumber: ").append(releaseVersionNumber);
			firstSelectedElement = false;
		}
		
		if (sender != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sender: ").append(sender);
			firstSelectedElement = false;
		}
		
		if (recipient != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recipient: ").append(recipient);
			firstSelectedElement = false;
		}
		
		if (sequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sequenceNumber: ").append(sequenceNumber);
			firstSelectedElement = false;
		}
		
		if (fileAvailableTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileAvailableTimeStamp: ").append(fileAvailableTimeStamp);
			firstSelectedElement = false;
		}
		
		if (utcTimeOffset != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("utcTimeOffset: ").append(utcTimeOffset);
			firstSelectedElement = false;
		}
		
		if (callEvents != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEvents: ");
			callEvents.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (callEventsCount != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEventsCount: ").append(callEventsCount);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

