/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.nrtrde;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import com.veon.rafm.roamingfraud.processors.NrtrdeDecodeProcessor.serializers.ByteArraySerializer;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.openmuc.jasn1.ber.*;


public class ServiceCode implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 46);

	private TeleServiceCode teleServiceCode = null;
	private BearerServiceCode bearerServiceCode = null;
	
	public ServiceCode() {
	}

	public ServiceCode(byte[] code) {
		this.code = code;
	}

	public void setTeleServiceCode(TeleServiceCode teleServiceCode) {
		this.teleServiceCode = teleServiceCode;
	}
	@JsonSerialize(using= ByteArraySerializer.class)
	public TeleServiceCode getTeleServiceCode() {
		return teleServiceCode;
	}

	public void setBearerServiceCode(BearerServiceCode bearerServiceCode) {
		this.bearerServiceCode = bearerServiceCode;
	}
	@JsonSerialize(using= ByteArraySerializer.class)
	public BearerServiceCode getBearerServiceCode() {
		return bearerServiceCode;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (bearerServiceCode != null) {
			codeLength += bearerServiceCode.encode(os, true);
			codeLength += BerLength.encodeLength(os, codeLength);
			if (withTag) {
				codeLength += tag.encode(os);
			}
			return codeLength;
		}
		
		if (teleServiceCode != null) {
			codeLength += teleServiceCode.encode(os, true);
			codeLength += BerLength.encodeLength(os, codeLength);
			if (withTag) {
				codeLength += tag.encode(os);
			}
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		BerLength length = new BerLength();
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		codeLength += length.decode(is);
		codeLength += berTag.decode(is);

		if (berTag.equals(TeleServiceCode.tag)) {
			teleServiceCode = new TeleServiceCode();
			codeLength += teleServiceCode.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BearerServiceCode.tag)) {
			bearerServiceCode = new BearerServiceCode();
			codeLength += bearerServiceCode.decode(is, false);
			return codeLength;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (teleServiceCode != null) {
			sb.append("teleServiceCode: ").append(teleServiceCode);
			return;
		}

		if (bearerServiceCode != null) {
			sb.append("bearerServiceCode: ").append(bearerServiceCode);
			return;
		}

		sb.append("<none>");
	}

}

